/*
735. 行星碰撞
给定一个整数数组 asteroids，表示在同一行的行星。

对于数组中的每一个元素，其绝对值表示行星的大小，正负表示行星的移动方向（正表示向右移动，负表示向左移动）。每一颗行星以相同的速度移动。

找出碰撞后剩下的所有行星。碰撞规则：两个行星相互碰撞，较小的行星会爆炸。如果两颗行星大小相同，则两颗行星都会爆炸。两颗移动方向相同的行星，永远不会发生碰撞。

示例 1：

输入：asteroids = [5,10,-5]
输出：[5,10]
解释：10 和 -5 碰撞后只剩下 10 。 5 和 10 永远不会发生碰撞。
示例 2：

输入：asteroids = [8,-8]
输出：[]
解释：8 和 -8 碰撞后，两者都发生爆炸。
示例 3：

输入：asteroids = [10,2,-5]
输出：[10]
解释：2 和 -5 发生碰撞后剩下 -5 。10 和 -5 发生碰撞后剩下 10 。
*/
class Solution {
    int fun(int a1, int a2){
        if (a1 > 0){
            a2 = -a2;
            if (a2 > a1)
                return -a2;
            else if (a2 < a1)
                return a1;
            else 
                return 0;
        }
        else { // a1 < 0 && a2 > 0
            a1 = -a1;
            if (a1 > a2)
                return -a1;
            else if (a1 < a2)
                return a2;
            else 
                return 0;
        }
    }
public:
    vector<int> asteroidCollision(vector<int>& asteroids) {
        stack<int> temp;
        int int_temp;
        for (int i = 0; i < asteroids.size(); i++){
            if (temp.empty()){
                temp.push(asteroids[i]);
                continue;
            }
            if (asteroids[i] * temp.top() > 0){
                temp.push(asteroids[i]);
                continue;
            }
            else if (temp.top() > 0){
                int_temp = fun(temp.top(), asteroids[i]);
                temp.pop();
                while (!temp.empty() && (temp.top() * int_temp <= 0 && temp.top() > 0)){
                    int_temp = fun(temp.top(), int_temp);
                    temp.pop();
                }
                if (int_temp != 0)
                    temp.push(int_temp);
            }
            else {
                temp.push(asteroids[i]);
                continue;
            }
        }
        vector<int> ans(temp.size(), 0);
        for (int i = ans.size() - 1; i > -1; i--){
            ans[i] = temp.top();
            temp.pop();
        }
        return ans;
    }
};
